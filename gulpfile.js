/* COMMON */

// Common required NPM packages
var gulp = require('gulp'); // http://www.gulpjs.com/

// Get the full path of the folder
var targetDirectory = process.env.INIT_CWD;

// Default Gulp task uses the 'build' task instead
gulp.task('default', ['build']);



/* BUILDING */

// Required NPM packages for building
var argv = require('yargs').argv; // https://www.npmjs.com/package/yargs
var gutil = require('gulp-util'); // https://www.npmjs.com/package/gulp-util
var del = require('del'); // https://www.npmjs.com/package/del
var cleanHTML = require('gulp-htmlmin'); // https://github.com/jonschlinkert/gulp-htmlmin
var zip = require('gulp-zip'); // https://www.npmjs.com/package/gulp-zip

// Set variable for the hidden folder during compliation
var targetDestDirectory = ".build";

// Deletes the old .build and non-archived build folders
gulp.task('build-init', function () {

	var array = [
		targetDirectory + '/' + targetDestDirectory
	];

	if (argv.noarchive !== undefined) {
		array.push(
			targetDirectory + '/public-build/**/*',
			targetDirectory + '/public-build/**/.*'
		);
	}

	return del(array, {
			force: true
		});

});

// Copies the directory and all the files and subfolders to a new hidden folder
gulp.task('build-copy', ['build-init'], function () {

	var files = [
		targetDirectory + '/public/**', // Copy everything...
		targetDirectory + '/public/**/.*', // ...including hidden files,...
		'!' + targetDirectory + '/public/node_modules{,/**}', // ...except the node_modules folder,...
		'!' + targetDirectory + '/public/scss{,/**}', // ...the SCSS folder,...
		'!' + targetDirectory + '/public/css/*.css', // ...the uncompressed CSS files,...
		'!' + targetDirectory + '/public/js/**/!(*.min.js)', // ...the JavaScript files (but keep the compiled ones, i.e. *.min.js),...
		'!' + targetDirectory + '/public/package.json', // ...the package.json,...
		'!' + targetDirectory + '/public/gulpfile.js', // ...the gulpfile,...
		'!' + targetDirectory + '/public/README.md', // ...the readme file,...
		'!' + targetDirectory + '/public/**/.DS_Store' // ...and macOS hidden files.
	];

	return gulp.src(files)
		.pipe(gulp.dest(targetDirectory + '/' + targetDestDirectory));

});

// Cleans the HTML (PHP) files by removing whitespace and comments
gulp.task('build-html', ['build-copy'], function () {

	// Since the header and footer have partial HTML (unclosed tags), we can
	// only minifiy the individual page HTML as 'html-minifier' does not currently
	// support this behaviour. See https://github.com/kangax/html-minifier/issues/743.

	return gulp.src(targetDirectory + '/' + targetDestDirectory + '/lib/pages/*.php')
		.pipe(cleanHTML({
			collapseWhitespace: true,
			removeComments: true,
			includeAutoGeneratedTags: false
		}))
		.pipe(gulp.dest(targetDirectory + '/' + targetDestDirectory + '/lib/pages/'));

});

// Deletes files generated during the build processes that cause unnecessary overhead
gulp.task('build-overhead', ['build-html'], function () {

	return del([
			targetDirectory + '/' + targetDestDirectory + '/**/.DS_Store'
		], {
			force: true
		});

});

// Prepares the processed files for use
gulp.task('build-prepare', ['build-overhead'], function () {

	if (argv.noarchive !== undefined) {

		// If using the --noarchive flag, renames the hidden folder to the '-build' folder and places it outside the target folder

		return gulp.src([
				targetDirectory + '/' + targetDestDirectory + '/**/*',
				targetDirectory + '/' + targetDestDirectory + '/**/.*'
			])
			.pipe(gulp.dest(targetDirectory + '/public-build'));

	}
	else {

		// Get the folder name from the above path
		var targetDirectoryName = targetDirectory.split('/').pop();

		// Construct a date/timestamp for the archive file name
		function leadingZero (i) {
			return (i < 10) ? '0' + i : i;
		}

		var today = new Date();

		var day = String(leadingZero(today.getDate()));
		var month = String(leadingZero(today.getMonth() + 1));
		var year = String(leadingZero(today.getFullYear()));
		var datestamp = day + month + year;

		var hour = String(leadingZero(today.getHours()));
		var minute = String(leadingZero(today.getMinutes()));
		var second = String(leadingZero(today.getSeconds()));
		var affix = (today.getHours() >= 12) ? 'PM' : 'AM';
		var timestamp = hour + minute + second + affix;

		var array = [
			targetDirectory + '/' + targetDestDirectory + '/**/*',
			targetDirectory + '/' + targetDestDirectory + '/**/.*'
		];

		return gulp.src(array)
			.pipe(zip(targetDirectoryName + '-' + datestamp + '-' + timestamp + '.zip'))
			.pipe(gulp.dest(targetDirectory + '/builds/'));

	}

});

// Delete the old hidden folder (for the task set when not using the --noarchive flag)
gulp.task('build-clean', ['build-prepare'], function () {

	return del([
			targetDirectory + '/' + targetDestDirectory
		], {
			force: true
		});

});

// Gulp task for building
gulp.task('build', [
	'build-init',
	'build-copy',
	'build-html',
	'build-overhead',
	'build-prepare',
	'build-clean'
], function () {

	gutil.log(
		gutil.colors.green('Build Success!')
	).beep();

});



/* SCSS */

// Required NPM packages for SCSS compilation
var sass = require('gulp-sass');
var sourcemaps = require('gulp-sourcemaps');
var rename = require('gulp-rename');
var changed = require('gulp-changed');
var using = require('gulp-using');

// Main task for SCSS/CSS/sourcemap compilation
gulp.task('sass', function () {

	var targetSrc = targetDirectory + '/public/scss/';
	var targetDest = targetDirectory + '/public/css/';

	gulp.watch(targetSrc + '**/*.scss', function () {

		gulp.src(targetSrc + '*.scss')
			.pipe(changed(targetDest + 'min', {
				extension: '.min.css'
			}))
			.pipe(using({
				path: 'relative',
				prefix: 'Compiling',
				color: 'yellow',
				filesize: true
			}));

		gulp.src(targetSrc + '**/*.scss')
			.pipe(sass({
				includePaths: ['_/sass/']
			}).on('error', sass.logError))
			.pipe(gulp.dest(targetDest));

		gulp.src(targetSrc + '**/*.scss')
			.pipe(sourcemaps.init())
			.pipe(sass({
				includePaths: ['_/sass/'],
				outputStyle: 'compressed'
			}).on('error', sass.logError))
			.pipe(rename({
				extname: '.min.css'
			}))
			.pipe(sourcemaps.write('./maps'))
			.pipe(gulp.dest(targetDest + 'min'));

	});

});

// Gulp task for compiling SCSS
gulp.task('scss', ['sass']);